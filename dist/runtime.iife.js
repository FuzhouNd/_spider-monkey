/*! 
// ==UserScript==
// @name         spider-runtime
// @namespace    http://tampermonkey.net/
// @version      0.2.5
// @description  help control browser
// @author       zxxzzzzz
// @include      *
// @icon         https://cdn.onlinewebfonts.com/svg/img_562349.png
// @grant        none
// ==/UserScript==
 */
const spider_monkey_runtime=function(){"use strict";const er="__func__";var P=(r=>(r.init="init",r.data="data",r.payload="payload",r.store="store",r))(P||{});function ht(r=6e3){return new Promise(t=>{setTimeout(()=>{t()},r)})}var ir=function(){return!1};const ur=ir;var ar=function(){return!0};const or=ar,cr={"@@functional/placeholder":!0};function h(r){return r!=null&&typeof r=="object"&&r["@@functional/placeholder"]===!0}function s(r){return function t(n){return arguments.length===0||h(n)?t:r.apply(this,arguments)}}function o(r){return function t(n,e){switch(arguments.length){case 0:return t;case 1:return h(n)?t:s(function(i){return r(n,i)});default:return h(n)&&h(e)?t:h(n)?s(function(i){return r(i,e)}):h(e)?s(function(i){return r(n,i)}):r(n,e)}}}var sr=o(function(t,n){return Number(t)+Number(n)});const Y=sr;function W(r,t){r=r||[],t=t||[];var n,e=r.length,i=t.length,u=[];for(n=0;n<e;)u[u.length]=r[n],n+=1;for(n=0;n<i;)u[u.length]=t[n],n+=1;return u}function S(r,t){switch(r){case 0:return function(){return t.apply(this,arguments)};case 1:return function(n){return t.apply(this,arguments)};case 2:return function(n,e){return t.apply(this,arguments)};case 3:return function(n,e,i){return t.apply(this,arguments)};case 4:return function(n,e,i,u){return t.apply(this,arguments)};case 5:return function(n,e,i,u,a){return t.apply(this,arguments)};case 6:return function(n,e,i,u,a,c){return t.apply(this,arguments)};case 7:return function(n,e,i,u,a,c,l){return t.apply(this,arguments)};case 8:return function(n,e,i,u,a,c,l,v){return t.apply(this,arguments)};case 9:return function(n,e,i,u,a,c,l,v,I){return t.apply(this,arguments)};case 10:return function(n,e,i,u,a,c,l,v,I,b){return t.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function q(r,t,n){return function(){for(var e=[],i=0,u=r,a=0;a<t.length||i<arguments.length;){var c;a<t.length&&(!h(t[a])||i>=arguments.length)?c=t[a]:(c=arguments[i],i+=1),e[a]=c,h(c)||(u-=1),a+=1}return u<=0?n.apply(this,e):S(u,q(r,e,n))}}var fr=o(function(t,n){return t===1?s(n):S(t,q(t,[],n))});const g=fr;var lr=s(function(t){return g(t.length,function(){var n=0,e=arguments[0],i=arguments[arguments.length-1],u=Array.prototype.slice.call(arguments,0);return u[0]=function(){var a=e.apply(this,W(arguments,[n,i]));return n+=1,a},t.apply(this,u)})});const pr=lr;function f(r){return function t(n,e,i){switch(arguments.length){case 0:return t;case 1:return h(n)?t:o(function(u,a){return r(n,u,a)});case 2:return h(n)&&h(e)?t:h(n)?o(function(u,a){return r(u,e,a)}):h(e)?o(function(u,a){return r(n,u,a)}):s(function(u){return r(n,e,u)});default:return h(n)&&h(e)&&h(i)?t:h(n)&&h(e)?o(function(u,a){return r(u,a,i)}):h(n)&&h(i)?o(function(u,a){return r(u,e,a)}):h(e)&&h(i)?o(function(u,a){return r(n,u,a)}):h(n)?s(function(u){return r(u,e,i)}):h(e)?s(function(u){return r(n,u,i)}):h(i)?s(function(u){return r(n,e,u)}):r(n,e,i)}}}var hr=f(function(t,n,e){var i=e.length;if(t>=i||t<-i)return e;var u=(i+t)%i,a=W(e);return a[u]=n(e[u]),a});const Xt=hr,$=Array.isArray||function(t){return t!=null&&t.length>=0&&Object.prototype.toString.call(t)==="[object Array]"};function vt(r){return r!=null&&typeof r["@@transducer/step"]=="function"}function d(r,t,n){return function(){if(arguments.length===0)return n();var e=arguments[arguments.length-1];if(!$(e)){for(var i=0;i<r.length;){if(typeof e[r[i]]=="function")return e[r[i]].apply(e,Array.prototype.slice.call(arguments,0,-1));i+=1}if(vt(e)){var u=t.apply(null,Array.prototype.slice.call(arguments,0,-1));return u(e)}}return n.apply(this,arguments)}}function k(r){return r&&r["@@transducer/reduced"]?r:{"@@transducer/value":r,"@@transducer/reduced":!0}}const p={init:function(){return this.xf["@@transducer/init"]()},result:function(r){return this.xf["@@transducer/result"](r)}};var vr=function(){function r(t,n){this.xf=n,this.f=t,this.all=!0}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.all&&(t=this.xf["@@transducer/step"](t,!0)),this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.f(n)||(this.all=!1,t=k(this.xf["@@transducer/step"](t,!1))),t},r}(),dr=o(function(t,n){return new vr(t,n)}),yr=o(d(["all"],dr,function(t,n){for(var e=0;e<n.length;){if(!t(n[e]))return!1;e+=1}return!0}));const Ct=yr;var gr=o(function(t,n){return n>t?n:t});const T=gr;function B(r,t){for(var n=0,e=t.length,i=Array(e);n<e;)i[n]=r(t[n]),n+=1;return i}function D(r){return Object.prototype.toString.call(r)==="[object String]"}var mr=s(function(t){return $(t)?!0:!t||typeof t!="object"||D(t)?!1:t.length===0?!0:t.length>0?t.hasOwnProperty(0)&&t.hasOwnProperty(t.length-1):!1});const M=mr;var $r=function(){function r(t){this.f=t}return r.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},r.prototype["@@transducer/result"]=function(t){return t},r.prototype["@@transducer/step"]=function(t,n){return this.f(t,n)},r}();function zt(r){return new $r(r)}var wr=o(function(t,n){return S(t.length,function(){return t.apply(n,arguments)})});const Ut=wr;function _r(r,t,n){for(var e=0,i=n.length;e<i;){if(t=r["@@transducer/step"](t,n[e]),t&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}e+=1}return r["@@transducer/result"](t)}function Ft(r,t,n){for(var e=n.next();!e.done;){if(t=r["@@transducer/step"](t,e.value),t&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}e=n.next()}return r["@@transducer/result"](t)}function Mt(r,t,n,e){return r["@@transducer/result"](n[e](Ut(r["@@transducer/step"],r),t))}var Jt=typeof Symbol<"u"?Symbol.iterator:"@@iterator";function m(r,t,n){if(typeof r=="function"&&(r=zt(r)),M(n))return _r(r,t,n);if(typeof n["fantasy-land/reduce"]=="function")return Mt(r,t,n,"fantasy-land/reduce");if(n[Jt]!=null)return Ft(r,t,n[Jt]());if(typeof n.next=="function")return Ft(r,t,n);if(typeof n.reduce=="function")return Mt(r,t,n,"reduce");throw new TypeError("reduce: list must be array or iterable")}var xr=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.xf["@@transducer/step"](t,this.f(n))},r}(),Ar=o(function(t,n){return new xr(t,n)});const Wr=Ar;function y(r,t){return Object.prototype.hasOwnProperty.call(t,r)}var Kt=Object.prototype.toString,Or=function(){return Kt.call(arguments)==="[object Arguments]"?function(t){return Kt.call(t)==="[object Arguments]"}:function(t){return y("callee",t)}}();const Vt=Or;var Ir=!{toString:null}.propertyIsEnumerable("toString"),Ht=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],Zt=function(){return arguments.propertyIsEnumerable("length")}(),Sr=function(t,n){for(var e=0;e<t.length;){if(t[e]===n)return!0;e+=1}return!1},kr=s(typeof Object.keys=="function"&&!Zt?function(t){return Object(t)!==t?[]:Object.keys(t)}:function(t){if(Object(t)!==t)return[];var n,e,i=[],u=Zt&&Vt(t);for(n in t)y(n,t)&&(!u||n!=="length")&&(i[i.length]=n);if(Ir)for(e=Ht.length-1;e>=0;)n=Ht[e],y(n,t)&&!Sr(i,n)&&(i[i.length]=n),e-=1;return i});const _=kr;var Er=o(d(["fantasy-land/map","map"],Wr,function(t,n){switch(Object.prototype.toString.call(n)){case"[object Function]":return g(n.length,function(){return t.call(this,n.apply(this,arguments))});case"[object Object]":return m(function(e,i){return e[i]=t(n[i]),e},{},_(n));default:return B(t,n)}}));const O=Er,E=Number.isInteger||function(t){return t<<0===t};var Lr=o(function(t,n){var e=t<0?n.length+t:t;return D(n)?n.charAt(e):n[e]});const j=Lr;var Pr=o(function(t,n){if(n!=null)return E(t)?j(t,n):n[t]});const R=Pr;var qr=o(function(t,n){return O(R(t),n)});const J=qr;var Br=f(m);const L=Br;var jr=s(function(t){return g(L(T,0,J("length",t)),function(){for(var n=0,e=t.length;n<e;){if(!t[n].apply(this,arguments))return!1;n+=1}return!0})});const Rr=jr;var Nr=s(function(t){return function(){return t}});const tt=Nr;var br=o(function(t,n){return t&&n});const Qt=br;var Tr=function(){function r(t,n){this.xf=n,this.f=t,this.any=!1}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.any||(t=this.xf["@@transducer/step"](t,!1)),this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.f(n)&&(this.any=!0,t=k(this.xf["@@transducer/step"](t,!0))),t},r}(),Dr=o(function(t,n){return new Tr(t,n)}),Xr=o(d(["any"],Dr,function(t,n){for(var e=0;e<n.length;){if(t(n[e]))return!0;e+=1}return!1}));const Cr=Xr;var zr=s(function(t){return g(L(T,0,J("length",t)),function(){for(var n=0,e=t.length;n<e;){if(t[n].apply(this,arguments))return!0;n+=1}return!1})});const Ur=zr;var Fr=o(function(t,n){return typeof n["fantasy-land/ap"]=="function"?n["fantasy-land/ap"](t):typeof t.ap=="function"?t.ap(n):typeof t=="function"?function(e){return t(e)(n(e))}:m(function(e,i){return W(e,O(i,n))},[],t)});const dt=Fr;function Mr(r,t){for(var n=0,e=t.length-(r-1),i=new Array(e>=0?e:0);n<e;)i[n]=Array.prototype.slice.call(t,n,n+r),n+=1;return i}var Jr=function(){function r(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(t)}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.acc=null,this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.store(n),this.full?this.xf["@@transducer/step"](t,this.getCopy()):t},r.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},r.prototype.getCopy=function(){return W(Array.prototype.slice.call(this.acc,this.pos),Array.prototype.slice.call(this.acc,0,this.pos))},r}(),Kr=o(function(t,n){return new Jr(t,n)}),Vr=o(d([],Kr,Mr));const Hr=Vr;var Zr=o(function(t,n){return W(n,[t])});const Qr=Zr;var Gr=o(function(t,n){return t.apply(this,n)});const Gt=Gr;var Yr=s(function(t){for(var n=_(t),e=n.length,i=[],u=0;u<e;)i[u]=t[n[u]],u+=1;return i});const Yt=Yr;function tn(r,t){return $(t)?t.map(r):_(t).reduce(function(n,e){return n[e]=r(t[e]),n},{})}var te=s(function r(t){return t=tn(function(n){return typeof n=="function"?n:r(n)},t),g(L(T,0,J("length",Yt(t))),function(){var n=arguments;return tn(function(e){return Gt(e,n)},t)})});const ne=te;var re=o(function(t,n){return n(t)});const ee=re;var ie=f(function(t,n,e){var i=t(n),u=t(e);return i<u?-1:i>u?1:0});const ue=ie;function yt(r,t,n){if(E(r)&&$(n)){var e=[].concat(n);return e[r]=t,e}var i={};for(var u in n)i[u]=n[u];return i[r]=t,i}var ae=s(function(t){return t==null});const K=ae;var oe=f(function r(t,n,e){if(t.length===0)return n;var i=t[0];if(t.length>1){var u=!K(e)&&y(i,e)?e[i]:E(t[1])?[]:{};n=r(Array.prototype.slice.call(t,1),n,u)}return yt(i,n,e)});const gt=oe;var ce=f(function(t,n,e){return gt([t],n,e)});const mt=ce;var se=o(function(t,n){switch(t){case 0:return function(){return n.call(this)};case 1:return function(e){return n.call(this,e)};case 2:return function(e,i){return n.call(this,e,i)};case 3:return function(e,i,u){return n.call(this,e,i,u)};case 4:return function(e,i,u,a){return n.call(this,e,i,u,a)};case 5:return function(e,i,u,a,c){return n.call(this,e,i,u,a,c)};case 6:return function(e,i,u,a,c,l){return n.call(this,e,i,u,a,c,l)};case 7:return function(e,i,u,a,c,l,v){return n.call(this,e,i,u,a,c,l,v)};case 8:return function(e,i,u,a,c,l,v,I){return n.call(this,e,i,u,a,c,l,v,I)};case 9:return function(e,i,u,a,c,l,v,I,b){return n.call(this,e,i,u,a,c,l,v,I,b)};case 10:return function(e,i,u,a,c,l,v,I,b,Dt){return n.call(this,e,i,u,a,c,l,v,I,b,Dt)};default:throw new Error("First argument to nAry must be a non-negative integer no greater than ten")}});const nt=se;var fe=s(function(t){return nt(2,t)});const le=fe;function X(r){var t=Object.prototype.toString.call(r);return t==="[object Function]"||t==="[object AsyncFunction]"||t==="[object GeneratorFunction]"||t==="[object AsyncGeneratorFunction]"}var pe=o(function(t,n){var e=g(t,n);return g(t,function(){return m(dt,O(e,arguments[0]),Array.prototype.slice.call(arguments,1))})});const nn=pe;var he=s(function(t){return nn(t.length,t)});const rt=he;var ve=o(function(t,n){return X(t)?function(){return t.apply(this,arguments)&&n.apply(this,arguments)}:rt(Qt)(t,n)});const de=ve;var ye=s(function(t){return t.apply(this,Array.prototype.slice.call(arguments,1))});const ge=ye;function rn(r){return function t(n){for(var e,i,u,a=[],c=0,l=n.length;c<l;){if(M(n[c]))for(e=r?t(n[c]):n[c],u=0,i=e.length;u<i;)a[a.length]=e[u],u+=1;else a[a.length]=n[c];c+=1}return a}}function me(r){return{"@@transducer/value":r,"@@transducer/reduced":!0}}var $e=function(r){return{"@@transducer/init":p.init,"@@transducer/result":function(t){return r["@@transducer/result"](t)},"@@transducer/step":function(t,n){var e=r["@@transducer/step"](t,n);return e["@@transducer/reduced"]?me(e):e}}},we=function(t){var n=$e(t);return{"@@transducer/init":p.init,"@@transducer/result":function(e){return n["@@transducer/result"](e)},"@@transducer/step":function(e,i){return M(i)?m(n,e,i):m(n,e,[i])}}};const _e=we;var xe=o(function(t,n){return O(t,_e(n))}),Ae=o(d(["fantasy-land/chain","chain"],xe,function(t,n){return typeof n=="function"?function(e){return t(n(e))(e)}:rn(!1)(O(t,n))}));const en=Ae;var We=f(function(t,n,e){if(t>n)throw new Error("min must not be greater than max in clamp(min, max, value)");return e<t?t:e>n?n:e});const Oe=We;function un(r){return new RegExp(r.source,(r.global?"g":"")+(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.sticky?"y":"")+(r.unicode?"u":""))}var Ie=s(function(t){return t===null?"Null":t===void 0?"Undefined":Object.prototype.toString.call(t).slice(8,-1)});const et=Ie;function it(r,t,n,e){var i=function(a){for(var c=t.length,l=0;l<c;){if(r===t[l])return n[l];l+=1}t[l]=r,n[l]=a;for(var v in r)r.hasOwnProperty(v)&&(a[v]=e?it(r[v],t,n,!0):r[v]);return a};switch(et(r)){case"Object":return i(Object.create(Object.getPrototypeOf(r)));case"Array":return i([]);case"Date":return new Date(r.valueOf());case"RegExp":return un(r);case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":return r.slice();default:return r}}var Se=s(function(t){return t!=null&&typeof t.clone=="function"?t.clone():it(t,[],[],!0)});const ke=Se;var Ee=o(function(t,n){var e=m(function(a,c){var l=t(c);return a[l]===void 0&&(a[l]=[]),a[l].push(c),a},{},n),i=[];for(var u in e)i.push(e[u]);return i});const Le=Ee;var Pe=s(function(t){return function(n,e){return t(n,e)?-1:t(e,n)?1:0}});const qe=Pe;var Be=s(function(t){return!t});const an=Be;var je=rt(an);const Re=je;function Ne(r,t){return function(){return t.call(this,r.apply(this,arguments))}}function V(r,t){return function(){var n=arguments.length;if(n===0)return t();var e=arguments[n-1];return $(e)||typeof e[r]!="function"?t.apply(this,arguments):e[r].apply(e,Array.prototype.slice.call(arguments,0,n-1))}}var be=f(V("slice",function(t,n,e){return Array.prototype.slice.call(e,t,n)}));const A=be;var Te=s(V("tail",A(1,1/0)));const $t=Te;function on(){if(arguments.length===0)throw new Error("pipe requires at least one argument");return S(arguments[0].length,L(Ne,arguments[0],$t(arguments)))}var De=s(function(t){return D(t)?t.split("").reverse().join(""):Array.prototype.slice.call(t,0).reverse()});const wt=De;function cn(){if(arguments.length===0)throw new Error("compose requires at least one argument");return on.apply(this,wt(arguments))}var Xe=j(0);const sn=Xe;function H(r){return r}var Ce=s(H);const ut=Ce;var ze=o(function(t,n){if(n.length<=0)return ut;var e=sn(n),i=$t(n);return S(e.length,function(){return m(function(u,a){return t.call(this,a,u)},e.apply(this,arguments),i)})});const fn=ze;var Ue=o(function(t,n){return fn.apply(this,[t,wt(n)])});const Fe=Ue;function ln(r){for(var t=[],n;!(n=r.next()).done;)t.push(n.value);return t}function N(r,t,n){for(var e=0,i=n.length;e<i;){if(r(t,n[e]))return!0;e+=1}return!1}function Me(r){var t=String(r).match(/^function (\w*)/);return t==null?"":t[1]}function Je(r,t){return r===t?r!==0||1/r===1/t:r!==r&&t!==t}const at=typeof Object.is=="function"?Object.is:Je;function pn(r,t,n,e){var i=ln(r),u=ln(t);function a(c,l){return _t(c,l,n.slice(),e.slice())}return!N(function(c,l){return!N(a,l,c)},u,i)}function _t(r,t,n,e){if(at(r,t))return!0;var i=et(r);if(i!==et(t))return!1;if(typeof r["fantasy-land/equals"]=="function"||typeof t["fantasy-land/equals"]=="function")return typeof r["fantasy-land/equals"]=="function"&&r["fantasy-land/equals"](t)&&typeof t["fantasy-land/equals"]=="function"&&t["fantasy-land/equals"](r);if(typeof r.equals=="function"||typeof t.equals=="function")return typeof r.equals=="function"&&r.equals(t)&&typeof t.equals=="function"&&t.equals(r);switch(i){case"Arguments":case"Array":case"Object":if(typeof r.constructor=="function"&&Me(r.constructor)==="Promise")return r===t;break;case"Boolean":case"Number":case"String":if(!(typeof r==typeof t&&at(r.valueOf(),t.valueOf())))return!1;break;case"Date":if(!at(r.valueOf(),t.valueOf()))return!1;break;case"Error":return r.name===t.name&&r.message===t.message;case"RegExp":if(!(r.source===t.source&&r.global===t.global&&r.ignoreCase===t.ignoreCase&&r.multiline===t.multiline&&r.sticky===t.sticky&&r.unicode===t.unicode))return!1;break}for(var u=n.length-1;u>=0;){if(n[u]===r)return e[u]===t;u-=1}switch(i){case"Map":return r.size!==t.size?!1:pn(r.entries(),t.entries(),n.concat([r]),e.concat([t]));case"Set":return r.size!==t.size?!1:pn(r.values(),t.values(),n.concat([r]),e.concat([t]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var a=_(r);if(a.length!==_(t).length)return!1;var c=n.concat([r]),l=e.concat([t]);for(u=a.length-1;u>=0;){var v=a[u];if(!(y(v,t)&&_t(t[v],r[v],c,l)))return!1;u-=1}return!0}var Ke=o(function(t,n){return _t(t,n,[],[])});const x=Ke;function hn(r,t,n){var e,i;if(typeof r.indexOf=="function")switch(typeof t){case"number":if(t===0){for(e=1/t;n<r.length;){if(i=r[n],i===0&&1/i===e)return n;n+=1}return-1}else if(t!==t){for(;n<r.length;){if(i=r[n],typeof i=="number"&&i!==i)return n;n+=1}return-1}return r.indexOf(t,n);case"string":case"boolean":case"function":case"undefined":return r.indexOf(t,n);case"object":if(t===null)return r.indexOf(t,n)}for(;n<r.length;){if(x(r[n],t))return n;n+=1}return-1}function C(r,t){return hn(t,r,0)>=0}function xt(r){var t=r.replace(/\\/g,"\\\\").replace(/[\b]/g,"\\b").replace(/\f/g,"\\f").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t").replace(/\v/g,"\\v").replace(/\0/g,"\\0");return'"'+t.replace(/"/g,'\\"')+'"'}var Z=function(t){return(t<10?"0":"")+t},Ve=typeof Date.prototype.toISOString=="function"?function(t){return t.toISOString()}:function(t){return t.getUTCFullYear()+"-"+Z(t.getUTCMonth()+1)+"-"+Z(t.getUTCDate())+"T"+Z(t.getUTCHours())+":"+Z(t.getUTCMinutes())+":"+Z(t.getUTCSeconds())+"."+(t.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+"Z"};const He=Ve;function vn(r){return function(){return!r.apply(this,arguments)}}function At(r,t){for(var n=0,e=t.length,i=[];n<e;)r(t[n])&&(i[i.length]=t[n]),n+=1;return i}function z(r){return Object.prototype.toString.call(r)==="[object Object]"}var Ze=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.f(n)?this.xf["@@transducer/step"](t,n):t},r}(),Qe=o(function(t,n){return new Ze(t,n)}),Ge=o(d(["fantasy-land/filter","filter"],Qe,function(r,t){return z(t)?m(function(n,e){return r(t[e])&&(n[e]=t[e]),n},{},_(t)):At(r,t)}));const Wt=Ge;var Ye=o(function(t,n){return Wt(vn(t),n)});const ot=Ye;function Ot(r,t){var n=function(a){var c=t.concat([r]);return C(a,c)?"<Circular>":Ot(a,c)},e=function(u,a){return B(function(c){return xt(c)+": "+n(u[c])},a.slice().sort())};switch(Object.prototype.toString.call(r)){case"[object Arguments]":return"(function() { return arguments; }("+B(n,r).join(", ")+"))";case"[object Array]":return"["+B(n,r).concat(e(r,ot(function(u){return/^\d+$/.test(u)},_(r)))).join(", ")+"]";case"[object Boolean]":return typeof r=="object"?"new Boolean("+n(r.valueOf())+")":r.toString();case"[object Date]":return"new Date("+(isNaN(r.valueOf())?n(NaN):xt(He(r)))+")";case"[object Null]":return"null";case"[object Number]":return typeof r=="object"?"new Number("+n(r.valueOf())+")":1/r===-1/0?"-0":r.toString(10);case"[object String]":return typeof r=="object"?"new String("+n(r.valueOf())+")":xt(r);case"[object Undefined]":return"undefined";default:if(typeof r.toString=="function"){var i=r.toString();if(i!=="[object Object]")return i}return"{"+e(r,_(r)).join(", ")+"}"}}var ti=s(function(t){return Ot(t,[])});const U=ti;var ni=o(function(t,n){if($(t)){if($(n))return t.concat(n);throw new TypeError(U(n)+" is not an array")}if(D(t)){if(D(n))return t+n;throw new TypeError(U(n)+" is not a string")}if(t!=null&&X(t["fantasy-land/concat"]))return t["fantasy-land/concat"](n);if(t!=null&&X(t.concat))return t.concat(n);throw new TypeError(U(t)+' does not have a method named "concat" or "fantasy-land/concat"')});const It=ni;var ri=s(function(t){var n=L(T,0,O(function(e){return e[0].length},t));return S(n,function(){for(var e=0;e<t.length;){if(t[e][0].apply(this,arguments))return t[e][1].apply(this,arguments);e+=1}})});const ei=ri;var ii=s(function(t){return g(t.length,t)});const St=ii;var ui=o(function(t,n){if(t>10)throw new Error("Constructor with greater than ten arguments");return t===0?function(){return new n}:St(nt(t,function(e,i,u,a,c,l,v,I,b,Dt){switch(arguments.length){case 1:return new n(e);case 2:return new n(e,i);case 3:return new n(e,i,u);case 4:return new n(e,i,u,a);case 5:return new n(e,i,u,a,c);case 6:return new n(e,i,u,a,c,l);case 7:return new n(e,i,u,a,c,l,v);case 8:return new n(e,i,u,a,c,l,v,I);case 9:return new n(e,i,u,a,c,l,v,I,b);case 10:return new n(e,i,u,a,c,l,v,I,b,Dt)}}))});const dn=ui;var ai=s(function(t){return dn(t.length,t)});const oi=ai;var ci=o(function(t,n){return g(L(T,0,J("length",n)),function(){var e=arguments,i=this;return t.apply(i,B(function(u){return u.apply(i,e)},n))})});const yn=ci;var si=St(function(r,t){return m(function(n,e){return r(e)?n+1:n},0,t)});const fi=si;var li=function(){function r(t,n,e,i){this.valueFn=t,this.valueAcc=n,this.keyFn=e,this.xf=i,this.inputs={}}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){var n;for(n in this.inputs)if(y(n,this.inputs)&&(t=this.xf["@@transducer/step"](t,this.inputs[n]),t["@@transducer/reduced"])){t=t["@@transducer/value"];break}return this.inputs=null,this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){var e=this.keyFn(n);return this.inputs[e]=this.inputs[e]||[e,this.valueAcc],this.inputs[e][1]=this.valueFn(this.inputs[e][1],n),t},r}(),pi=q(4,[],function(t,n,e,i){return new li(t,n,e,i)}),hi=q(4,[],d([],pi,function(t,n,e,i){return m(function(u,a){var c=e(a),l=t(y(c,u)?u[c]:it(n,[],[],!1),a);return l&&l["@@transducer/reduced"]?k(u):(u[c]=l,u)},{},i)}));const ct=hi;var vi=ct(function(r,t){return r+1},0);const di=vi;var yi=Y(-1);const gi=yi;var mi=o(function(t,n){return n==null||n!==n?t:n});const kt=mi;var $i=f(function(t,n,e){var i=t(n),u=t(e);return i>u?-1:i<u?1:0});const wi=$i;var _i=function(){function r(){this._nativeSet=typeof Set=="function"?new Set:null,this._items={}}return r.prototype.add=function(t){return!gn(t,!0,this)},r.prototype.has=function(t){return gn(t,!1,this)},r}();function gn(r,t,n){var e=typeof r,i,u;switch(e){case"string":case"number":return r===0&&1/r===-1/0?n._items["-0"]?!0:(t&&(n._items["-0"]=!0),!1):n._nativeSet!==null?t?(i=n._nativeSet.size,n._nativeSet.add(r),u=n._nativeSet.size,u===i):n._nativeSet.has(r):e in n._items?r in n._items[e]?!0:(t&&(n._items[e][r]=!0),!1):(t&&(n._items[e]={},n._items[e][r]=!0),!1);case"boolean":if(e in n._items){var a=r?1:0;return n._items[e][a]?!0:(t&&(n._items[e][a]=!0),!1)}else return t&&(n._items[e]=r?[!1,!0]:[!0,!1]),!1;case"function":return n._nativeSet!==null?t?(i=n._nativeSet.size,n._nativeSet.add(r),u=n._nativeSet.size,u===i):n._nativeSet.has(r):e in n._items?C(r,n._items[e])?!0:(t&&n._items[e].push(r),!1):(t&&(n._items[e]=[r]),!1);case"undefined":return n._items[e]?!0:(t&&(n._items[e]=!0),!1);case"object":if(r===null)return n._items.null?!0:(t&&(n._items.null=!0),!1);default:return e=Object.prototype.toString.call(r),e in n._items?C(r,n._items[e])?!0:(t&&n._items[e].push(r),!1):(t&&(n._items[e]=[r]),!1)}}const Et=_i;var xi=o(function(t,n){for(var e=[],i=0,u=t.length,a=n.length,c=new Et,l=0;l<a;l+=1)c.add(n[l]);for(;i<u;)c.add(t[i])&&(e[e.length]=t[i]),i+=1;return e});const Lt=xi;var Ai=f(function(t,n,e){for(var i=[],u=0,a=n.length;u<a;)!N(t,n[u],e)&&!N(t,n[u],i)&&i.push(n[u]),u+=1;return i});const Pt=Ai;var Wi=f(function(t,n,e){var i=Array.prototype.slice.call(e,0);return i.splice(t,n),i});const mn=Wi;function Oi(r,t){if(t==null)return t;if(E(r)&&$(t))return mn(r,1,t);var n={};for(var e in t)n[e]=t[e];return delete n[r],n}function Ii(r,t){if(E(r)&&$(t))return[].concat(t);var n={};for(var e in t)n[e]=t[e];return n}var Si=o(function r(t,n){if(n==null)return n;switch(t.length){case 0:return n;case 1:return Oi(t[0],n);default:var e=t[0],i=Array.prototype.slice.call(t,1);return n[e]==null?Ii(e,n):mt(e,r(i,n[e]),n)}});const $n=Si;var ki=o(function(t,n){return $n([t],n)});const Ei=ki;var Li=o(function(t,n){return t/n});const Pi=Li;var qi=function(){function r(t,n){this.xf=n,this.n=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.n>0?(this.n-=1,t):this.xf["@@transducer/step"](t,n)},r}(),Bi=o(function(t,n){return new qi(t,n)}),ji=o(d(["drop"],Bi,function(t,n){return A(Math.max(0,t),1/0,n)}));const wn=ji;var Ri=function(){function r(t,n){this.xf=n,this.n=t,this.i=0}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){this.i+=1;var e=this.n===0?t:this.xf["@@transducer/step"](t,n);return this.n>=0&&this.i>=this.n?k(e):e},r}(),Ni=o(function(t,n){return new Ri(t,n)}),bi=o(d(["take"],Ni,function(t,n){return A(0,t<0?1/0:t,n)}));const qt=bi;function Ti(r,t){return qt(r<t.length?t.length-r:0,t)}var Di=function(){function r(t,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(t)}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.acc=null,this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.full&&(t=this.xf["@@transducer/step"](t,this.acc[this.pos])),this.store(n),t},r.prototype.store=function(t){this.acc[this.pos]=t,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},r}(),Xi=o(function(t,n){return new Di(t,n)}),Ci=o(d([],Xi,Ti));const zi=Ci;function Ui(r,t){for(var n=t.length-1;n>=0&&r(t[n]);)n-=1;return A(0,n+1,t)}var Fi=function(){function r(t,n){this.f=t,this.retained=[],this.xf=n}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.retained=null,this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.f(n)?this.retain(t,n):this.flush(t,n)},r.prototype.flush=function(t,n){return t=m(this.xf["@@transducer/step"],t,this.retained),this.retained=[],this.xf["@@transducer/step"](t,n)},r.prototype.retain=function(t,n){return this.retained.push(n),t},r}(),Mi=o(function(t,n){return new Fi(t,n)}),Ji=o(d([],Mi,Ui));const Ki=Ji;var Vi=function(){function r(t,n){this.xf=n,this.pred=t,this.lastValue=void 0,this.seenFirstValue=!1}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){var e=!1;return this.seenFirstValue?this.pred(this.lastValue,n)&&(e=!0):this.seenFirstValue=!0,this.lastValue=n,e?t:this.xf["@@transducer/step"](t,n)},r}(),Hi=o(function(t,n){return new Vi(t,n)});const _n=Hi;var Zi=j(-1);const xn=Zi;var Qi=o(d([],_n,function(t,n){var e=[],i=1,u=n.length;if(u!==0)for(e[0]=n[0];i<u;)t(xn(e),n[i])||(e[e.length]=n[i]),i+=1;return e}));const An=Qi;var Gi=s(d([],_n(x),An(x)));const Yi=Gi;var tu=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){if(this.f){if(this.f(n))return t;this.f=null}return this.xf["@@transducer/step"](t,n)},r}(),nu=o(function(t,n){return new tu(t,n)}),ru=o(d(["dropWhile"],nu,function(t,n){for(var e=0,i=n.length;e<i&&t(n[e]);)e+=1;return A(e,1/0,n)}));const eu=ru;var iu=o(function(t,n){return t||n});const Wn=iu;var uu=o(function(t,n){return X(t)?function(){return t.apply(this,arguments)||n.apply(this,arguments)}:rt(Wn)(t,n)});const au=uu;function ou(r){var t=Object.prototype.toString.call(r);return t==="[object Uint8ClampedArray]"||t==="[object Int8Array]"||t==="[object Uint8Array]"||t==="[object Int16Array]"||t==="[object Uint16Array]"||t==="[object Int32Array]"||t==="[object Uint32Array]"||t==="[object Float32Array]"||t==="[object Float64Array]"||t==="[object BigInt64Array]"||t==="[object BigUint64Array]"}var cu=s(function(t){return t!=null&&typeof t["fantasy-land/empty"]=="function"?t["fantasy-land/empty"]():t!=null&&t.constructor!=null&&typeof t.constructor["fantasy-land/empty"]=="function"?t.constructor["fantasy-land/empty"]():t!=null&&typeof t.empty=="function"?t.empty():t!=null&&t.constructor!=null&&typeof t.constructor.empty=="function"?t.constructor.empty():$(t)?[]:D(t)?"":z(t)?{}:Vt(t)?function(){return arguments}():ou(t)?t.constructor.from(""):void 0});const On=cu;var su=o(function(t,n){return wn(t>=0?n.length-t:0,n)});const In=su;var fu=o(function(r,t){return x(In(r.length,t),r)});const lu=fu;var pu=f(function(t,n,e){return x(t(n),t(e))});const hu=pu;var vu=f(function(t,n,e){return x(n[t],e[t])});const du=vu;var yu=o(function r(t,n){if(!z(n)&&!$(n))return n;var e=n instanceof Array?[]:{},i,u,a;for(u in n)i=t[u],a=typeof i,e[u]=a==="function"?i(n[u]):i&&a==="object"?r(i,n[u]):n[u];return e});const gu=yu;var mu=function(){function r(t,n){this.xf=n,this.f=t,this.found=!1}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.found||(t=this.xf["@@transducer/step"](t,void 0)),this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.f(n)&&(this.found=!0,t=k(this.xf["@@transducer/step"](t,n))),t},r}(),$u=o(function(t,n){return new mu(t,n)}),wu=o(d(["find"],$u,function(t,n){for(var e=0,i=n.length;e<i;){if(t(n[e]))return n[e];e+=1}}));const _u=wu;var xu=function(){function r(t,n){this.xf=n,this.f=t,this.idx=-1,this.found=!1}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.found||(t=this.xf["@@transducer/step"](t,-1)),this.xf["@@transducer/result"](t)},r.prototype["@@transducer/step"]=function(t,n){return this.idx+=1,this.f(n)&&(this.found=!0,t=k(this.xf["@@transducer/step"](t,this.idx))),t},r}(),Au=o(function(t,n){return new xu(t,n)}),Wu=o(d([],Au,function(t,n){for(var e=0,i=n.length;e<i;){if(t(n[e]))return e;e+=1}return-1}));const Ou=Wu;var Iu=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](t,this.last))},r.prototype["@@transducer/step"]=function(t,n){return this.f(n)&&(this.last=n),t},r}(),Su=o(function(t,n){return new Iu(t,n)}),ku=o(d([],Su,function(t,n){for(var e=n.length-1;e>=0;){if(t(n[e]))return n[e];e-=1}}));const Eu=ku;var Lu=function(){function r(t,n){this.xf=n,this.f=t,this.idx=-1,this.lastIdx=-1}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=function(t){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](t,this.lastIdx))},r.prototype["@@transducer/step"]=function(t,n){return this.idx+=1,this.f(n)&&(this.lastIdx=this.idx),t},r}(),Pu=o(function(t,n){return new Lu(t,n)}),qu=o(d([],Pu,function(t,n){for(var e=n.length-1;e>=0;){if(t(n[e]))return e;e-=1}return-1}));const Bu=qu;var ju=s(rn(!0));const Ru=ju;var Nu=s(function(t){return g(t.length,function(n,e){var i=Array.prototype.slice.call(arguments,0);return i[0]=e,i[1]=n,t.apply(this,i)})});const st=Nu;var bu=o(V("forEach",function(t,n){for(var e=n.length,i=0;i<e;)t(n[i]),i+=1;return n}));const Tu=bu;var Du=o(function(t,n){for(var e=_(n),i=0;i<e.length;){var u=e[i];t(n[u],u,n),i+=1}return n});const Xu=Du;var Cu=s(function(t){for(var n={},e=0;e<t.length;)n[t[e][0]]=t[e][1],e+=1;return n});const zu=Cu;var Uu=o(V("groupBy",ct(function(r,t){return r.push(t),r},[])));const Fu=Uu;var Mu=o(function(r,t){for(var n=[],e=0,i=t.length;e<i;){for(var u=e+1;u<i&&r(t[u-1],t[u]);)u+=1;n.push(t.slice(e,u)),e=u}return n});const Ju=Mu;var Ku=o(function(t,n){return t>n});const Vu=Ku;var Hu=o(function(t,n){return t>=n});const Zu=Hu;var Qu=o(function(t,n){if(t.length===0||K(n))return!1;for(var e=n,i=0;i<t.length;)if(!K(e)&&y(t[i],e))e=e[t[i]],i+=1;else return!1;return!0});const Sn=Qu;var Gu=o(function(t,n){return Sn([t],n)});const Yu=Gu;var ta=o(function(t,n){return K(n)?!1:t in n});const na=ta;var ra=o(at);const ea=ra;var ia=f(function(t,n,e){return g(Math.max(t.length,n.length,e.length),function(){return t.apply(this,arguments)?n.apply(this,arguments):e.apply(this,arguments)})});const ua=ia;var aa=Y(1);const oa=aa;var ca=o(C);const sa=ca;var fa=ct(function(r,t){return t},null);const la=fa;var pa=o(function(t,n){return typeof n.indexOf=="function"&&!$(n)?n.indexOf(t):hn(n,t,0)});const ha=pa;var va=A(0,-1);const da=va;var ya=f(function(t,n,e){return At(function(i){return N(t,i,e)},n)});const ga=ya;var ma=f(function(t,n,e){t=t<e.length&&t>=0?t:e.length;var i=Array.prototype.slice.call(e,0);return i.splice(t,0,n),i});const $a=ma;var wa=f(function(t,n,e){return t=t<e.length&&t>=0?t:e.length,[].concat(Array.prototype.slice.call(e,0,t),n,Array.prototype.slice.call(e,t))});const _a=wa;var xa=function(){function r(t,n){this.xf=n,this.f=t,this.set=new Et}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.set.add(this.f(n))?this.xf["@@transducer/step"](t,n):t},r}(),Aa=o(function(t,n){return new xa(t,n)}),Wa=o(d([],Aa,function(r,t){for(var n=new Et,e=[],i=0,u,a;i<t.length;)a=t[i],u=r(a),n.add(u)&&e.push(a),i+=1;return e}));const kn=Wa;var Oa=kn(ut);const Bt=Oa;var Ia=o(function(t,n){var e,i;return t.length>n.length?(e=t,i=n):(e=n,i=t),Bt(At(st(C)(e),i))});const Sa=Ia;var ka=o(V("intersperse",function(t,n){for(var e=[],i=0,u=n.length;i<u;)i===u-1?e.push(n[i]):e.push(n[i],t),i+=1;return e}));const Ea=ka;function La(r){if(r==null)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(r),n=1,e=arguments.length;n<e;){var i=arguments[n];if(i!=null)for(var u in i)y(u,i)&&(t[u]=i[u]);n+=1}return t}const ft=typeof Object.assign=="function"?Object.assign:La;var Pa=o(function(t,n){var e={};return e[t]=n,e});const En=Pa;var qa={"@@transducer/init":Array,"@@transducer/step":function(r,t){return r.push(t),r},"@@transducer/result":H},Ba={"@@transducer/init":String,"@@transducer/step":function(r,t){return r+t},"@@transducer/result":H},ja={"@@transducer/init":Object,"@@transducer/step":function(r,t){return ft(r,M(t)?En(t[0],t[1]):t)},"@@transducer/result":H};function Ra(r){if(vt(r))return r;if(M(r))return qa;if(typeof r=="string")return Ba;if(typeof r=="object")return ja;throw new Error("Cannot create transformer for "+r)}var Na=f(function(t,n,e){return vt(t)?m(n(t),t["@@transducer/init"](),e):m(n(Ra(t)),it(t,[],[],!1),e)});const ba=Na;var Ta=s(function(t){for(var n=_(t),e=n.length,i=0,u={};i<e;){var a=n[i],c=t[a],l=y(c,u)?u[c]:u[c]=[];l[l.length]=a,i+=1}return u});const Da=Ta;var Xa=s(function(t){for(var n=_(t),e=n.length,i=0,u={};i<e;){var a=n[i];u[t[a]]=a,i+=1}return u});const Ca=Xa;var za=o(function(t,n){return g(t+1,function(){var e=arguments[t];if(e!=null&&X(e[n]))return e[n].apply(e,Array.prototype.slice.call(arguments,0,t));throw new TypeError(U(e)+' does not have a method named "'+n+'"')})});const Q=za;var Ua=o(function(t,n){return n instanceof t||n!=null&&(n.constructor===t||t.name==="Object"&&typeof n=="object")});const Ln=Ua;var Fa=s(function(t){return t!=null&&x(t,On(t))});const Ma=Fa;var Ja=Q(1,"join");const Ka=Ja;var Va=s(function(t){return yn(function(){return Array.prototype.slice.call(arguments,0)},t)});const Pn=Va;var Ha=s(function(t){var n,e=[];for(n in t)e[e.length]=n;return e});const Za=Ha;var Qa=o(function(t,n){if(typeof n.lastIndexOf=="function"&&!$(n))return n.lastIndexOf(t);for(var e=n.length-1;e>=0;){if(x(n[e],t))return e;e-=1}return-1});const Ga=Qa;function jt(r){return Object.prototype.toString.call(r)==="[object Number]"}var Ya=s(function(t){return t!=null&&jt(t.length)?t.length:NaN});const qn=Ya;var to=o(function(t,n){return function(e){return function(i){return O(function(u){return n(u,i)},e(t(i)))}}});const lt=to;var no=f(function(t,n,e){return Xt(t,tt(n),e)});const Bn=no;var ro=s(function(t){return lt(j(t),Bn(t))});const eo=ro;var io=o(function(t,n){return t.map(function(e){for(var i=n,u=0,a;u<e.length;){if(i==null)return;a=e[u],i=E(a)?j(a,i):i[a],u+=1}return i})});const jn=io;var uo=o(function(t,n){return jn([t],n)[0]});const F=uo;var ao=s(function(t){return lt(F(t),gt(t))});const oo=ao;var co=s(function(t){return lt(R(t),mt(t))});const so=co;var fo=o(function(t,n){return t<n});const lo=fo;var po=o(function(t,n){return t<=n});const ho=po;var vo=f(function(t,n,e){for(var i=0,u=e.length,a=[],c=[n];i<u;)c=t(c[0],e[i]),a[i]=c[1],i+=1;return[c[0],a]});const yo=vo;var go=f(function(t,n,e){for(var i=e.length-1,u=[],a=[n];i>=0;)a=t(a[0],e[i]),u[i]=a[1],i-=1;return[a[0],u]});const mo=go;var $o=o(function(t,n){return m(function(e,i){return e[i]=t(n[i],i,n),e},{},_(n))});const wo=$o;var _o=o(function(t,n){return n.match(t)||[]});const xo=_o;var Ao=o(function(t,n){return E(t)?!E(n)||n<1?NaN:(t%n+n)%n:NaN});const Wo=Ao;var Oo=f(function(t,n,e){return t(e)>t(n)?e:n});const Io=Oo;var So=L(Y,0);const Rn=So;var ko=s(function(t){return Rn(t)/t.length});const Nn=ko;var Eo=s(function(t){var n=t.length;if(n===0)return NaN;var e=2-n%2,i=(n-e)/2;return Nn(Array.prototype.slice.call(t,0).sort(function(u,a){return u<a?-1:u>a?1:0}).slice(i,i+e))});const Lo=Eo;var Po=o(function(t,n){var e={};return S(n.length,function(){var i=t.apply(this,arguments);return y(i,e)||(e[i]=n.apply(this,arguments)),e[i]})});const qo=Po;var Bo=s(function(t){return ft.apply(null,[{}].concat(t))});const jo=Bo;var Ro=f(function(t,n,e){var i={},u;for(u in n)y(u,n)&&(i[u]=y(u,e)?t(u,n[u],e[u]):n[u]);for(u in e)y(u,e)&&!y(u,i)&&(i[u]=e[u]);return i});const Rt=Ro;var No=f(function r(t,n,e){return Rt(function(i,u,a){return z(u)&&z(a)?r(t,u,a):t(i,u,a)},n,e)});const pt=No;var bo=o(function(t,n){return pt(function(e,i,u){return i},t,n)});const To=bo;var Do=o(function(t,n){return pt(function(e,i,u){return u},t,n)});const bn=Do;var Xo=f(function(t,n,e){return pt(function(i,u,a){return t(u,a)},n,e)});const Co=Xo;var zo=o(function(t,n){return ft({},n,t)});const Uo=zo;var Fo=o(function(t,n){return ft({},t,n)});const Mo=Fo;var Jo=f(function(t,n,e){return Rt(function(i,u,a){return t(u,a)},n,e)});const Ko=Jo;var Vo=o(function(t,n){return n<t?n:t});const Ho=Vo;var Zo=f(function(t,n,e){return t(e)<t(n)?e:n});const Qo=Zo;function Go(r,t,n){if(E(r)&&$(n)){var e=[].concat(n);return e[r]=t(e[r]),e}var i={};for(var u in n)i[u]=n[u];return i[r]=t(i[r]),i}var Yo=f(function r(t,n,e){if(!z(e)&&!$(e)||t.length===0)return e;var i=t[0];if(!y(i,e))return e;if(t.length===1)return Go(i,n,e);var u=r(Array.prototype.slice.call(t,1),n,e[i]);return u===e[i]?e:yt(i,u,e)});const Tn=Yo;var tc=f(function(t,n,e){return Tn([t],n,e)});const nc=tc;var rc=o(function(t,n){return t%n});const ec=rc;var ic=f(function(r,t,n){var e=n.length,i=n.slice(),u=r<0?e+r:r,a=t<0?e+t:t,c=i.splice(u,1);return u<0||u>=n.length||a<0||a>=n.length?n:[].concat(i.slice(0,a)).concat(c).concat(i.slice(a,n.length))});const uc=ic;var ac=o(function(t,n){return t*n});const Dn=ac,oc=o((r,t)=>n=>r.call(globalThis,bn(t,n)));var cc=s(function(t){return-t});const sc=cc;var fc=o(function(t,n){return Ct(vn(t),n)});const lc=fc;var pc=s(function(t){var n=t<0?1:t+1;return g(n,function(){return j(t,arguments)})});const hc=pc;var vc=f(function(t,n,e){return t(n(e))});const dc=vc;function yc(r){return[r]}var gc=s(yc);const mc=gc;var $c=o(function(t,n){for(var e={},i={},u=0,a=t.length;u<a;)i[t[u]]=1,u+=1;for(var c in n)i.hasOwnProperty(c)||(e[c]=n[c]);return e});const wc=$c;var _c=q(4,[],function(t,n,e,i){return t(n(e),n(i))});const xc=_c;var Ac=s(function(t){var n=!1,e;return S(t.length,function(){return n||(n=!0,e=t.apply(this,arguments)),e})});const Wc=Ac;function Xn(r,t){if(t==null||!X(t.then))throw new TypeError("`"+r+"` expected a Promise, received "+Ot(t,[]))}var Oc=o(function(t,n){return Xn("otherwise",n),n.then(null,t)});const Ic=Oc;var Cn=function(r){return{value:r,map:function(t){return Cn(t(r))}}},Sc=f(function(t,n,e){return t(function(i){return Cn(n(i))})(e).value});const zn=Sc;var kc=o(function(t,n){return[t,n]});const Ec=kc;function Un(r){return o(function(t,n){return S(Math.max(0,t.length-n.length),function(){return t.apply(this,r(n,arguments))})})}var Lc=Un(W);const Pc=Lc;var qc=Un(st(W));const Bc=qc;var jc=Pn([Wt,ot]);const Rc=jc;var Nc=f(function(t,n,e){return x(F(t,e),n)});const bc=Nc;var Tc=f(function(t,n,e){return kt(t,F(n,e))});const Dc=Tc;var Xc=f(function(t,n,e){return t(F(n,e))});const Cc=Xc;var zc=o(function(t,n){for(var e={},i=0;i<t.length;)t[i]in n&&(e[t[i]]=n[t[i]]),i+=1;return e});const Uc=zc;var Fc=o(function(t,n){for(var e={},i=0,u=t.length;i<u;){var a=t[i];e[a]=n[a],i+=1}return e});const Fn=Fc;var Mc=o(function(t,n){var e={};for(var i in n)t(n[i],i,n)&&(e[i]=n[i]);return e});const Jc=Mc;var Kc=o(function(t,n){return W([t],n)});const Mn=Kc;var Vc=L(Dn,1);const Hc=Vc;var Zc=o(function(t,n){return g(n.length,function(){for(var e=[],i=0;i<n.length;)e.push(n[i].call(this,arguments[i])),i+=1;return t.apply(this,e.concat(Array.prototype.slice.call(arguments,n.length)))})});const Jn=Zc;var Qc=Jn(B,[Fn,ut]);const Gc=Qc;function Kn(r,t,n){return function(e){return t(n(r(e)))}}var Yc=function(){function r(t,n,e){this.xf=e,this.f=t,this.g=n}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.xf["@@transducer/step"](t,Kn(this.f,this.g,n))},r}(),ts=f(function(t,n,e){return new Yc(t,n,e)}),ns=f(d(["fantasy-land/promap","promap"],ts,Kn));const rs=ns;var es=f(function(t,n,e){return x(n,R(t,e))});const is=es;var us=f(function(t,n,e){return Ln(t,R(n,e))});const as=us;var os=f(function(t,n,e){return kt(t,R(n,e))});const cs=os;var ss=f(function(t,n,e){return t(R(n,e))});const fs=ss;var ls=o(function(t,n){return t.map(function(e){return F([e],n)})});const ps=ls;var hs=o(function(t,n){if(!(jt(t)&&jt(n)))throw new TypeError("Both arguments to range must be numbers");for(var e=[],i=t;i<n;)e.push(i),i+=1;return e});const vs=hs;var ds=f(function(t,n,e){for(var i=e.length-1;i>=0;){if(n=t(e[i],n),n&&n["@@transducer/reduced"]){n=n["@@transducer/value"];break}i-=1}return n});const Vn=ds;var ys=q(4,[],function(t,n,e,i){return m(function(u,a){return t(u,a)?n(u,a):k(u)},e,i)});const gs=ys;var ms=s(k);const $s=ms;var ws=o(function(t,n){var e=Number(n),i=0,u;if(e<0||isNaN(e))throw new RangeError("n must be a non-negative number");for(u=new Array(e);i<e;)u[i]=t(i),i+=1;return u});const Hn=ws;var _s=o(function(t,n){return Hn(tt(t),n)});const xs=_s;var As=f(function(t,n,e){return e.replace(t,n)});const Ws=As;var Os=f(function(t,n,e){for(var i=0,u=e.length,a=[n];i<u;)n=t(n,e[i]),a[i+1]=n,i+=1;return a});const Is=Os;var Ss=o(function(t,n){return typeof n.sequence=="function"?n.sequence(t):Vn(function(e,i){return dt(O(Mn,e),i)},t([]),n)});const Zn=Ss;var ks=f(function(t,n,e){return zn(t,tt(n),e)});const Es=ks;var Ls=o(function(t,n){return Array.prototype.slice.call(n,0).sort(t)});const Ps=Ls;var qs=o(function(t,n){return Array.prototype.slice.call(n,0).sort(function(e,i){var u=t(e),a=t(i);return u<a?-1:u>a?1:0})});const Bs=qs;var js=o(function(t,n){return Array.prototype.slice.call(n,0).sort(function(e,i){for(var u=0,a=0;u===0&&a<t.length;)u=t[a](e,i),a+=1;return u})});const Rs=js;var Ns=Q(1,"split");const bs=Ns;var Ts=o(function(t,n){return[A(0,t,n),A(t,qn(n),n)]});const Ds=Ts;var Xs=o(function(t,n){if(t<=0)throw new Error("First argument to splitEvery must be a positive integer");for(var e=[],i=0;i<n.length;)e.push(A(i,i+=t,n));return e});const Cs=Xs;var zs=o(function(t,n){for(var e=0,i=n.length,u=[];e<i&&!t(n[e]);)u.push(n[e]),e+=1;return[u,Array.prototype.slice.call(n,e)]});const Us=zs;var Fs=q(2,[],function(t,n){for(var e=[],i=[],u=0;u<n.length;u=u+1)t(n[u])||i.push(n[u]),(u<n.length-1&&t(n[u+1])||u===n.length-1)&&i.length>0&&(e.push(i),i=[]);return e});const Ms=Fs;var Js=o(function(r,t){return x(qt(r.length,t),r)});const Ks=Js;var Vs=o(function(t,n){return Number(t)-Number(n)});const Hs=Vs;var Zs=o(function(t,n){return It(Lt(t,n),Lt(n,t))});const Qs=Zs;var Gs=f(function(t,n,e){return It(Pt(t,n,e),Pt(t,e,n))});const Ys=Gs;var tf=o(function(t,n){for(var e=n.length-1;e>=0&&t(n[e]);)e-=1;return A(e+1,1/0,n)});const nf=tf;var rf=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.f(n)?this.xf["@@transducer/step"](t,n):k(t)},r}(),ef=o(function(t,n){return new rf(t,n)}),uf=o(d(["takeWhile"],ef,function(t,n){for(var e=0,i=n.length;e<i&&t(n[e]);)e+=1;return A(0,e,n)}));const af=uf;var of=function(){function r(t,n){this.xf=n,this.f=t}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return this.f(n),this.xf["@@transducer/step"](t,n)},r}(),cf=o(function(t,n){return new of(t,n)}),sf=o(d([],cf,function(t,n){return t(n),n}));const ff=sf;function lf(r){return Object.prototype.toString.call(r)==="[object RegExp]"}var pf=o(function(t,n){if(!lf(t))throw new TypeError("\u2018test\u2019 requires a value of type RegExp as its first argument; received "+U(t));return un(t).test(n)});const hf=pf;var vf=o(function(t,n){return Xn("andThen",n),n.then(t)});const df=vf;var yf=Q(0,"toLowerCase");const gf=yf;var mf=s(function(t){var n=[];for(var e in t)y(e,t)&&(n[n.length]=[e,t[e]]);return n});const $f=mf;var wf=s(function(t){var n=[];for(var e in t)n[n.length]=[e,t[e]];return n});const _f=wf;var xf=Q(0,"toUpperCase");const Af=xf;var Wf=g(4,function(t,n,e,i){return m(t(typeof n=="function"?zt(n):n),e,i)});const Of=Wf;var If=s(function(t){for(var n=0,e=[];n<t.length;){for(var i=t[n],u=0;u<i.length;)typeof e[u]>"u"&&(e[u]=[]),e[u].push(i[u]),u+=1;n+=1}return e});const Sf=If;var kf=f(function(t,n,e){return typeof e["fantasy-land/traverse"]=="function"?e["fantasy-land/traverse"](n,t):typeof e.traverse=="function"?e.traverse(n,t):Zn(t,O(n,e))});const Ef=kf;var G=`	
\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF`,Lf="\u200B",Pf=typeof String.prototype.trim=="function",qf=s(!Pf||G.trim()||!Lf.trim()?function(t){var n=new RegExp("^["+G+"]["+G+"]*"),e=new RegExp("["+G+"]["+G+"]*$");return t.replace(n,"").replace(e,"")}:function(t){return t.trim()});const Bf=qf;var jf=o(function(t,n){return S(t.length,function(){try{return t.apply(this,arguments)}catch(e){return n.apply(this,W([e],arguments))}})});const Rf=jf;var Nf=s(function(t){return function(){return t(Array.prototype.slice.call(arguments,0))}});const bf=Nf;var Tf=s(function(t){return nt(1,t)});const Df=Tf;var Xf=o(function(t,n){return g(t,function(){for(var e=1,i=n,u=0,a;e<=t&&typeof i=="function";)a=e===t?arguments.length:u+i.length,i=i.apply(this,Array.prototype.slice.call(arguments,u,a)),e+=1,u=a;return i})});const Cf=Xf;var zf=o(function(t,n){for(var e=t(n),i=[];e&&e.length;)i[i.length]=e[0],e=t(e[1]);return i});const Uf=zf;var Ff=o(cn(Bt,W));const Mf=Ff;var Jf=function(){function r(t,n){this.xf=n,this.pred=t,this.items=[]}return r.prototype["@@transducer/init"]=p.init,r.prototype["@@transducer/result"]=p.result,r.prototype["@@transducer/step"]=function(t,n){return N(this.pred,n,this.items)?t:(this.items.push(n),this.xf["@@transducer/step"](t,n))},r}(),Kf=o(function(t,n){return new Jf(t,n)}),Vf=o(d([],Kf,function(r,t){for(var n=0,e=t.length,i=[],u;n<e;)u=t[n],N(r,u,i)||(i[i.length]=u),n+=1;return i}));const Qn=Vf;var Hf=f(function(t,n,e){return Qn(t,W(n,e))});const Zf=Hf;var Qf=f(function(t,n,e){return t(e)?e:n(e)});const Gf=Qf;var Yf=en(H);const tl=Yf;var nl=f(function(t,n,e){for(var i=e;!t(i);)i=n(i);return i});const rl=nl;var el=o(function(r,t){return r in t&&$(t[r])?B(function(n){return yt(r,n,t)},t[r]):[t]});const il=el;var ul=s(function(t){var n,e=[];for(n in t)e[e.length]=t[n];return e});const al=ul;var ol=function(r){return{value:r,"fantasy-land/map":function(){return this}}},cl=o(function(t,n){return t(ol)(n).value});const sl=cl;var fl=f(function(t,n,e){return t(e)?n(e):e});const ll=fl;var pl=o(function(t,n){for(var e in t)if(y(e,t)&&!t[e](n[e]))return!1;return!0});const Gn=pl;var hl=o(function(t,n){for(var e in t)if(y(e,t)&&t[e](n[e]))return!0;return!1});const vl=hl;var dl=o(function(t,n){return Gn(O(x,t),n)});const yl=dl;var gl=o(function(r,t){return ot(st(C)(r),t)});const ml=gl;var $l=o(function(t,n){return Boolean(!t^!n)});const wl=$l;var _l=o(function(t,n){for(var e=0,i=t.length,u,a=n.length,c=[];e<i;){for(u=0;u<a;)c[c.length]=[t[e],n[u]],u+=1;e+=1}return c});const xl=_l;var Al=o(function(t,n){for(var e=[],i=0,u=Math.min(t.length,n.length);i<u;)e[i]=[t[i],n[i]],i+=1;return e});const Wl=Al;var Ol=o(function(t,n){for(var e=0,i=Math.min(t.length,n.length),u={};e<i;)u[t[e]]=n[e],e+=1;return u});const Il=Ol;var Sl=f(function(t,n,e){for(var i=[],u=0,a=Math.min(n.length,e.length);u<a;)i[u]=t(n[u],e[u]),u+=1;return i});const kl=Sl;var El=s(function(t){return g(t.length,function(){var e=arguments;return function(){return t.apply(this,e)}})});const Ll=Object.freeze(Object.defineProperty({__proto__:null,F:ur,T:or,__:cr,add:Y,addIndex:pr,adjust:Xt,all:Ct,allPass:Rr,always:tt,and:Qt,any:Cr,anyPass:Ur,ap:dt,aperture:Hr,append:Qr,apply:Gt,applySpec:ne,applyTo:ee,ascend:ue,assoc:mt,assocPath:gt,binary:le,bind:Ut,both:de,call:ge,chain:en,clamp:Oe,clone:ke,collectBy:Le,comparator:qe,complement:Re,compose:cn,composeWith:Fe,concat:It,cond:ei,construct:oi,constructN:dn,converge:yn,count:fi,countBy:di,curry:St,curryN:g,dec:gi,defaultTo:kt,descend:wi,difference:Lt,differenceWith:Pt,dissoc:Ei,dissocPath:$n,divide:Pi,drop:wn,dropLast:zi,dropLastWhile:Ki,dropRepeats:Yi,dropRepeatsWith:An,dropWhile:eu,either:au,empty:On,endsWith:lu,eqBy:hu,eqProps:du,equals:x,evolve:gu,filter:Wt,find:_u,findIndex:Ou,findLast:Eu,findLastIndex:Bu,flatten:Ru,flip:st,forEach:Tu,forEachObjIndexed:Xu,fromPairs:zu,groupBy:Fu,groupWith:Ju,gt:Vu,gte:Zu,has:Yu,hasIn:na,hasPath:Sn,head:sn,identical:ea,identity:ut,ifElse:ua,inc:oa,includes:sa,indexBy:la,indexOf:ha,init:da,innerJoin:ga,insert:$a,insertAll:_a,intersection:Sa,intersperse:Ea,into:ba,invert:Da,invertObj:Ca,invoker:Q,is:Ln,isEmpty:Ma,isNil:K,join:Ka,juxt:Pn,keys:_,keysIn:Za,last:xn,lastIndexOf:Ga,length:qn,lens:lt,lensIndex:eo,lensPath:oo,lensProp:so,lift:rt,liftN:nn,lt:lo,lte:ho,map:O,mapAccum:yo,mapAccumRight:mo,mapObjIndexed:wo,match:xo,mathMod:Wo,max:T,maxBy:Io,mean:Nn,median:Lo,memoizeWith:qo,mergeAll:jo,mergeDeepLeft:To,mergeDeepRight:bn,mergeDeepWith:Co,mergeDeepWithKey:pt,mergeLeft:Uo,mergeRight:Mo,mergeWith:Ko,mergeWithKey:Rt,min:Ho,minBy:Qo,modify:nc,modifyPath:Tn,modulo:ec,move:uc,multiply:Dn,nAry:nt,partialObject:oc,negate:sc,none:lc,not:an,nth:j,nthArg:hc,o:dc,objOf:En,of:mc,omit:wc,on:xc,once:Wc,or:Wn,otherwise:Ic,over:zn,pair:Ec,partial:Pc,partialRight:Bc,partition:Rc,path:F,paths:jn,pathEq:bc,pathOr:Dc,pathSatisfies:Cc,pick:Uc,pickAll:Fn,pickBy:Jc,pipe:on,pipeWith:fn,pluck:J,prepend:Mn,product:Hc,project:Gc,promap:rs,prop:R,propEq:is,propIs:as,propOr:cs,propSatisfies:fs,props:ps,range:vs,reduce:L,reduceBy:ct,reduceRight:Vn,reduceWhile:gs,reduced:$s,reject:ot,remove:mn,repeat:xs,replace:Ws,reverse:wt,scan:Is,sequence:Zn,set:Es,slice:A,sort:Ps,sortBy:Bs,sortWith:Rs,split:bs,splitAt:Ds,splitEvery:Cs,splitWhen:Us,splitWhenever:Ms,startsWith:Ks,subtract:Hs,sum:Rn,symmetricDifference:Qs,symmetricDifferenceWith:Ys,tail:$t,take:qt,takeLast:In,takeLastWhile:nf,takeWhile:af,tap:ff,test:hf,andThen:df,times:Hn,toLower:gf,toPairs:$f,toPairsIn:_f,toString:U,toUpper:Af,transduce:Of,transpose:Sf,traverse:Ef,trim:Bf,tryCatch:Rf,type:et,unapply:bf,unary:Df,uncurryN:Cf,unfold:Uf,union:Mf,unionWith:Zf,uniq:Bt,uniqBy:kn,uniqWith:Qn,unless:Gf,unnest:tl,until:rl,unwind:il,update:Bn,useWith:Jn,values:Yt,valuesIn:al,view:sl,when:ll,where:Gn,whereAny:vl,whereEq:yl,without:ml,xor:wl,xprod:xl,zip:Wl,zipObj:Il,zipWith:kl,thunkify:El},Symbol.toStringTag,{value:"Module"}));async function Nt(r="",t="zxx"){const n=document.createElement("script"),e=`${er}_${t}`;for(n.innerHTML=`window.${e} = ${r};`,document.body.append(n);;){const i=window[e];if(i)return i.destroy=()=>{window[e]=void 0,n.remove()},i;await ht(100)}}async function Pl(r,t,n){const e=await Nt(t,"eval"),i=await e({R:Ll,delay:ht},n);return e.destroy(),i}const ql=Object.freeze(Object.defineProperty({__proto__:null,getFunc:Nt,eval:Pl},Symbol.toStringTag,{value:"Module"}));function Bl(r,t){r.value=t,r.dispatchEvent(new InputEvent("input",{inputType:"insert",data:""}))}async function jl(r,t){if(r.click(),!t)return;const n=await Nt(t);let e=0;const i=3;for(;e<i;){if(await ht(1e3),await n(window))return;e+=1}}const Yn=Object.assign({"./action/event.ts":Object.freeze(Object.defineProperty({__proto__:null,input:Bl,click:jl},Symbol.toStringTag,{value:"Module"})),"./action/func.ts":ql,"./action/query.ts":Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}))}),tr=Object.keys(Yn).reduce((r,t)=>{const n=Yn[t];return{...r,...n}},{});async function Rl(r){let t;Array.isArray(r)||(r=[r]);for(const n of r){const{action:e,params:i}=n;tr[e]&&(t=await tr[e](t,...i))}return t}const bt="__socket__";let w=window[bt],Tt="";function nr(r){return new Promise((t,n)=>{if(w){if(r.type===P.data){w.send(JSON.stringify(r)),t(r);return}if(r.type===P.init||r.type===P.payload){w.send(JSON.stringify(r));const e=i=>{const u=JSON.parse(i.data);(u==null?void 0:u.messageId)===r.messageId&&(t(u),w&&(w==null||w.removeEventListener("message",e)))};w.addEventListener("message",e);return}return}n("need init socket")})}async function rr(){const r=await nr({type:P.init,content:{url:location.href},messageId:new Date().valueOf().toString(),webSocketId:window.name});if(r)Tt=r.webSocketId,console.log("runtime init success",Tt);else throw Error("runtime init fail")}async function Nl(){if(w){const r=async t=>{const n=JSON.parse(t.data);if(n.type===P.payload){const e=await Rl(n.data);nr({type:P.data,data:e,messageId:n.messageId,webSocketId:Tt})}};w.addEventListener("message",r)}else throw Error("need init socket")}async function bl(){if(!w){const r=location.host;console.log(`ws://${r}/spider-runtime`,"123123"),w=new WebSocket(`ws://${r}/spider-runtime`),window[bt]=w,w.addEventListener("open",async()=>{await rr(),Nl()}),w.addEventListener("close",()=>{window[bt]=void 0,console.log(new Date().toLocaleString(),"socket close")});return}await rr()}return setTimeout(()=>{bl()},1e3),{version:"0.0.1"}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
